to, err := human()
To err is human
22 Jan 2018
Tags: edmontongo, golang

Nathan Youngman
@nathany

gopher@nathany.com
https://nathany.com

* to, err := human()

"To err is human; to forgive, divine."
- Alexander Pope, [[https://www.poetryfoundation.org/poems/44897/an-essay-on-criticism-part-2][_An_Essay_on_Criticism:_Part_2_]]

* Everyone makes mistakes


# computer programming parlance

* Errors are normal

- file not found
- directory already exists
- json: cannot unmarshal object
- ...

# There are a lot


* You may have seen

	if err != nil {
		return err
	}

# The prevailing pattern of error handling in Go?
# Annoyed? Disappointed? Unfair?


* divine.(forgiver)

.image err.png

"To err is human; to forgive, divine." - Alexander Pope, [[https://www.poetryfoundation.org/poems/44897/an-essay-on-criticism-part-2][_An_Essay_on_Criticism:_Part_2_]]

* Strive to forgive

* Don't ignore

	to, _ := human()

# Forgiveness doesn't mean ignoring, or to pretend something didn't happen

* forgive | fəˈɡɪv |

"stop feeling angry or resentful"

- Errors are normal
- Accept that errors will occur
- Consider the errors
- Build friendlier, more reliable software

* Wayback

* Error handling in C

.code open.c

# `perror()`

* Error handling in Go

.code open.go

* Multiple return values

	func Open(name string) (*File, error)

- No need for a side channel
- No special values like -1 for an error
- Clarity
- Consistency
- Useful for other purposes

* Defer simplifies error handling
# picking up from previous example

	// ... open the file
	defer f.Close()

	b := make([]byte, 512)
	_, err := f.Read(b)
	if err != nil {
		// handle read error
		// no need to close file
		return err
	}

- Cleanup is always performed

* Early return

	if err != nil {
		return err
	}

	// think happy thoughts...

- Take care of errors early

* Guard clause

	if i < 1 || i > 10 {
		return errors.New("please provide a number between 1 and 10, inclusive")
	}

	// The input is valid

- Less to think about later
# reading code

* Scannable code

- Error handling code is indented
- The happy path is not


* Not my problem

	if err != nil {
		return err
	}

# bubble the error up and up

But I want to help...

	if err != nil {
		return fmt.Errorf("add context here: %v", err)
	}


# not necessarily helping



* How errors work

# code diving

* fmt.Errorf

	return fmt.Errorf("add context here: %v", err)

From the fmt package:

	func Errorf(format string, a ...interface{}) error {
		return errors.New(Sprintf(format, a...))
	}

* The error interface

	type error interface {
	    Error() string
	}



* errors.New


	// Package errors implements functions to manipulate errors.
	package errors

	// New returns an error that formats as the given text.
	func New(text string) error {
		return &errorString{text}
	}

	// errorString is a trivial implementation of error.
	type errorString struct {
		s string
	}

	func (e *errorString) Error() string {
		return e.s
	}

errors.New uses a pointer: `&errorString`

* Pointer comparisons


	_, err := f.Read(b)
	if err == io.EOF {
		// end of file
	}

What is `io.EOF`?

	var EOF = errors.New("EOF")

* Err sentinels

Package bufio:

	var ErrBufferFull = errors.New("bufio: buffer full")

Package database/sql:

	var ErrNoRows = errors.New("sql: no rows in result set")

Package image:

	var ErrFormat = errors.New("image: unknown format")

Package http:

	var ErrNoCookie = errors.New("http: named cookie not present")

Package zip:

	var ErrFormat = errors.New("zip: not a valid zip file")


* Custom error types

Package url:

	type EscapeError string

	func (e EscapeError) Error() string {
		return "invalid URL escape " + strconv.Quote(string(e))
	}


# avoid recursion

* Custom error types

	func Parse(rawurl string) (*URL, error)

	type Error struct {
		Op  string
		URL string
		Err error
	}

	func (e *Error) Error() string { return e.Op + " " + e.URL + ": " + e.Err.Error() }

Usage:

.play -edit err.go /BEGIN/,/END/

# type assertions

* Too many errors

* The Road to Wisdom?

	The road to wisdom? - Well, it's plain
	and simple to express:
		Err
		and err
		and err again,
		but less
		and less
		and less.
	       — Piet Hein


* Simplify

	err := fn()
	if err != nil {
		return err
	}
	return nil

Instead:

	return fn()

* Fail if error

In main.go:

	func failIfError(err error) {
		if err != nil {
			log.Fatal(err)
		}
	}

Then:

	failIfError(err)

	failIfError(funcThatMayReturnErr())

# NOTE: log.Fatal uses os.Exit, bypasses defers


* Error free subset

- Can you isolate the code that returns errors?


* Storing an error for later

.play -edit zip.go /BEGIN MAIN/,/END MAIN/


* Error value inside a struct

.play -edit zip.go /BEGIN STRUCT/,/END STRUCT/

# Errors are values

* Store error and return

.play -edit zip.go /BEGIN NEW/,/END NEW/

* Skip if there was a prior error

.play -edit zip.go /BEGIN FILE/,/END FILE/

* Return previous error in the final step

.play -edit zip.go /BEGIN CLOSE/,/END CLOSE/

* Don't panic

# no exceptions. panic in rare situations.

* Panic

	panic("where is my towel?")

`runtime.Error`:

	42 / 0

Crash.

* Recover

Panic bubbles up the call stack of the currently executing goroutine.

	defer func() {
		if e := recover(); e != nil {
			// recover from panic
		}
	}()

NOTE: net/http servers recover and close the stream


* Errors over channels

* Pass errors between goroutines

	errors := make(chan error)

	// ...

	err := doThatThing()
	if err != nil {
		errors <- err
		return
	}


* Resources

Articles:

- Errors are values: [[https://blog.golang.org/errors-are-values]]

Code:

- Add context to an error [[https://github.com/pkg/errors]]
- Annotate errors [[https://github.com/juju/errors]]

- Synchronization, error propagation [[https://godoc.org/golang.org/x/sync/errgroup]]

- Zip API without errors based on [[https://github.com/RobotsAndPencils/buford/blob/master/pushpackage/pushpackage.go]]
