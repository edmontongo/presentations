Package Overview: sync/atomic 
27 Mar 2017
Tags: edmontongo, golang

Lukasz Rozycki
[[https://lukaszr.com]]

* Statements interleaving

  func withdraw(int amount) bool {
    if balance >= amount {
        balance -= amount
        return true
    }
    return false
  }

* Statements interleaving

  balance = 150
  A withdraw(100)
  B withdraw(100)

  A   if 150 >= 100 {
  B   if 150 >= 100 {
  B	balance -= 100		// balance = 50
  A	balance -= 100		// balance = -50
  A	return true
  B	return true

* Http request counter

* Http request counter

- sync.WaitGroup
- Go Data Race Detector
- Only guaranteed atomic statements are in sync.atomic package

* Withdraw example
  balance = 150
  A withdraw(100)
  B withdraw(100)

  A   if 150 >= 100 {
  B   if 150 >= 100 {
  B	balance -= 100		// balance = 50
  A	balance -= 100		// data race!
  A	return true
  B	return true

* AddT functions
Atomic equivalent of:

  *addr += delta
  return *addr

Functions

  func AddInt32(addr *int32, delta int32) (new int32)
  func AddInt64(addr *int64, delta int64) (new int64)
  func AddUint32(addr *uint32, delta uint32) (new uint32)
  func AddUint64(addr *uint64, delta uint64) (new uint64)
  func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)

* Http request counter - atomic increment

* LoadT and StoreT functions
LoadT is atomic equivalent of:

  return *addr 

StoreT is atomic equivalent of:

  *addr = val

- Required to avoid partial write/read

* LoadT and StoreT functions

  func LoadInt32(addr *int32) (val int32)
  func LoadInt64(addr *int64) (val int64)
  func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)
  func LoadUint32(addr *uint32) (val uint32)
  func LoadUint64(addr *uint64) (val uint64)
  func LoadUintptr(addr *uintptr) (val uintptr)

  func StoreInt32(addr *int32, val int32)
  func StoreInt64(addr *int64, val int64)
  func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)
  func StoreUint32(addr *uint32, val uint32)
  func StoreUint64(addr *uint64, val uint64)
  func StoreUintptr(addr *uintptr, val uintptr)

* Http request counter - atomic load and store

* SwapT functions
Atomic equivalent of:
 
  old = *addr
  *addr = new
  return old

Functions

  func SwapInt32(addr *int32, new int32) (old int32)
  func SwapInt64(addr *int64, new int64) (old int64)
  func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)
  func SwapUint32(addr *uint32, new uint32) (old uint32)
  func SwapUint64(addr *uint64, new uint64) (old uint64)
  func SwapUintptr(addr *uintptr, new uintptr) (old uintptr)

* CompareAndSwapT functions
Atomic equivalent of:

  if *addr == old {
        *addr = new
        return true
  }
  return false

Functions

  func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)
  func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)
  func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)
  func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)
  func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)
  func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)

* Http request counter - compare-and-swap

* atomic.Value

- provides an atomic load and store of a consistently typed value

  type Value

- func (*Value) Load

  func (v *Value) Load() (x interface{})

- func (*Value) Store

  func (v *Value) Store(x interface{})

- Store panics for nil and inconsistent type

* atomic.Value Example (Config)

  var config Value // holds current server configuration
  // Create initial config value and store into config.
  config.Store(loadConfig())
  go func() {
          // Reload config every 10 seconds
          // and update config value with the new version.
          for {
                  time.Sleep(10 * time.Second)
                  config.Store(loadConfig())
          }
  }()
  // Create worker goroutines that handle incoming requests
  // using the latest config value.
  for i := 0; i < 10; i++ {
          go func() {
                  for r := range requests() {
                          c := config.Load()
                          // Handle request r using config c.
                          _, _ = r, c
                  }
          }()
  }

* atomic.Value Example (ReadMostly)

  type Map map[string]string
  var m Value
  m.Store(make(Map))
  var mu sync.Mutex // used only by writers
  // read function can be used to read the data without further synchronization
  read := func(key string) (val string) {
          m1 := m.Load().(Map)
          return m1[key]
  }

* atomic.Value Example (ReadMostly) cont.

  // insert function can be used to update the data without further synchronization
  insert := func(key, val string) {
          mu.Lock() // synchronize with other potential writers
          defer mu.Unlock()
          m1 := m.Load().(Map) // load current value of the data structure
          m2 := make(Map)      // create a new value
          for k, v := range m1 {
                  m2[k] = v // copy all data from the current object to the new one
          }
          m2[key] = val // do the update that we need
          m.Store(m2)   // atomically replace the current object with the new one
          // At this point all new readers start working with the new version.
          // The old version will be garbage collected once the existing readers
          // (if any) are done with it.
  }
  _, _ = read, insert

* Resources
- [[https://golang.org/pkg/atomic/][Package sync/atomic]] docs
- [[https://en.wikipedia.org/wiki/Concurrent_computing][Concurrent computing]] Wikipedia
- [[http://stackoverflow.com/questions/25519636/go-atomic-load-and-store][Go atomic Load and Store]] stackoverflow
